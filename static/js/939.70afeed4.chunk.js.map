{"version":3,"file":"static/js/939.70afeed4.chunk.js","mappings":"gWACA,EAAwB,yBAAxB,EAA0D,0BAA1D,EAA2F,wBAA3F,EAA0H,wB,kDCW1H,EAVqBA,EAAAA,KAAaC,MAAM,CACtCC,MAAOF,EAAAA,KAAaE,MAAM,oBAAoBC,SAAS,qBACvDC,SAAUJ,EAAAA,KAEPG,SAAS,wBACTE,IAAI,EAAG,gDACRC,SAAUN,EAAAA,KACCO,SAAQ,K,SCajBC,EAAY,CAChBN,MAAO,GACPE,SAAU,GACVE,UAAS,GAMEG,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAGjB,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAcT,EACdU,iBAAiBC,EACjBC,SAAS,SAACC,EAAOC,GACfZ,GAASa,EAAAA,EAAAA,KAAM,UAAKF,KACpBC,EAAQE,WACT,IASIC,EAA4CV,EAA5CU,aAAaC,EAA+BX,EAA/BW,aAAaC,EAAkBZ,EAAlBY,OAAOC,EAAWb,EAAXa,QACxC,EAAkCb,EAAOM,OAAlCnB,EAAP,EAAOA,MAAME,EAAb,EAAaA,SAASE,EAAtB,EAAsBA,SACtB,OACE,iBAAKuB,UAAWC,EAAhB,WACE,SAACC,EAAA,EAAD,CAAQF,UAAWC,EAAnB,UACE,SAACE,EAAA,EAAD,OAEF,SAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAnC,sBAGA,iBAAMC,OAAO,GAAGP,UAAWC,EAAWV,SAAUM,EAAhD,UACE,UAACW,EAAA,EAAD,CAAWC,GAAI,CAAEC,IAAK,EAAGC,MAAO,QAAhC,WACE,SAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,QACNR,QAAQ,WACRS,KAAK,QACLC,KAAK,QACLC,MAAO5C,EACP6C,SAAUtB,EACVuB,MAAOC,QAAQtB,EAAOzB,QAAU+C,QAAQrB,EAAQ1B,OAChDgD,WAAYD,QAAQrB,EAAQ1B,QAAUyB,EAAOzB,SAE/C,SAACuC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,WACNR,QAAQ,WACRS,KAAK,WACLC,KAAMhC,EAAc,OAAQ,WAC5BiC,MAAO1C,EACP4C,MAAOC,QAAQtB,EAAOvB,WAAa6C,QAAQrB,EAAQxB,UACnD8C,WAAYD,QAAQrB,EAAQxB,WAAauB,EAAOvB,SAChD2C,SAAUtB,EACV0B,WAAY,CACVC,cACE,SAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACE,SAACC,EAAA,EAAD,CACE,aAAW,6BACXC,QA5Cc,kBAAM1C,GAAiB,SAAA2C,GAAI,OAAKA,CAAL,GAA3B,EA6CdC,KAAK,MAHP,SAKG7C,GAAe,SAAC8C,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,YAM9C,SAACC,EAAA,EAAD,CACEC,SAAS,SAACC,EAAA,EAAD,CAAUC,QAAS1D,EAAUyC,SAAUtB,IAChDmB,KAAK,WACLD,MAAM,iBAGR,SAACsB,EAAA,EAAD,CAEApB,KAAK,SACJV,QAAQ,YAHT,sBAMA,SAAC+B,EAAA,GAAD,CAAMrC,UAAWC,EAAjB,UACE,SAACoC,EAAA,GAAD,CAAMC,MAAI,EAAV,UACE,SAACC,EAAA,EAAD,CAAMC,KAAK,WAAWlC,QAAQ,QAA9B,uDASb,ECvHc,SAASmC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAAC9D,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.scss?1c6d","utils/SchemaSignIn.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paper\":\"LoginForm_paper__cg29t\",\"avatar\":\"LoginForm_avatar__gZCyq\",\"form\":\"LoginForm_form__Kx5pU\",\"link\":\"LoginForm_link__GY3qv\"};","import * as yup from 'yup';\n\nconst schemaSignIn = yup.object().shape({\n  email: yup.string().email('Incorrect format').required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(8, 'â€‹Password must be at least 8 characters'),\n    remember: yup\n    .boolean().default(false)\n});\n\nexport default schemaSignIn;","import {\n  Avatar,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  IconButton,\n  InputAdornment,\n  Link,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/AuthSlice/operations';\nimport css from './LoginForm.module.scss';\nimport LockOpenOutlinedIcon from '@mui/icons-material/LockOpenOutlined';\nimport {Visibility, VisibilityOff } from '@mui/icons-material';\nimport {  useState } from 'react';\nimport schemaSignIn from 'utils/SchemaSignIn';\n\nconst initState = {\n  email: '',\n  password: '',\n  remember:false,\n};\n// const formReducer = (state = initState, { _, target: { name, value } }) => {\n//   return { ...state, [name]: value };\n// };\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  // const [remember,setRemember] = useState(false);\n  // const [inputValues, dispatchInputs] = useReducer(formReducer, initState);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const formik = useFormik({\n    initialValues:initState,\n    validationSchema:schemaSignIn,\n    onSubmit:(values,actions) => {\n      dispatch(login({ ...values }));\n      actions.resetForm();\n    }\n  })\n\n  const handleClickShowPassword = () => setShowPassword( show => !show);\n  // const handleRemember = ({target:{checked}}) => setRemember(checked);\n  \n  \n  // const { email, password } = inputValues;\n  // const canSubmit = email && password.length > 5\n  const {handleChange,handleSubmit,errors,touched} = formik;\n  const {email,password,remember} = formik.values;\n  return (\n    <div className={css.paper}>\n      <Avatar className={css.avatar}>\n        <LockOpenOutlinedIcon />\n      </Avatar>\n      <Typography component=\"h1\" variant=\"h5\">\n        Sign In\n      </Typography>\n      <form action=\"\" className={css.form}  onSubmit={handleSubmit} >\n        <FormGroup sx={{ gap: 2, width: '100%' }}>\n          <TextField\n            fullWidth\n            label=\"Email\"\n            variant=\"outlined\"\n            name=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={handleChange}\n            error={Boolean(errors.email) && Boolean(touched.email)}\n            helperText={Boolean(touched.email) && errors.email}\n          />\n          <TextField\n            fullWidth\n            label=\"Password\"\n            variant=\"outlined\"\n            name=\"password\"\n            type={showPassword ?'text': 'password'}\n            value={password}\n            error={Boolean(errors.password) && Boolean(touched.password)}\n            helperText={Boolean(touched.password) && errors.password}\n            onChange={handleChange}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    edge=\"end\"\n                  >\n                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox checked={remember} onChange={handleChange} />}\n            name='remember'\n            label=\"Remember me\"\n          />\n          \n          <Button \n          // disabled={!isValid || !dirty}  !IMPORTANT =>DONT USE DIABLE IN THIS VARIANT\n          type=\"submit\"\n           variant=\"contained\">\n            Sign In\n          </Button>\n          <Grid className={css.link}>\n            <Grid item>\n              <Link href=\"register\" variant=\"body2\">\n                Don't have an account? Sign Up\n              </Link>\n            </Grid>\n          </Grid>\n        </FormGroup>\n      </form>\n    </div>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["yup","shape","email","required","password","min","remember","default","initState","LoginForm","dispatch","useDispatch","useState","showPassword","setShowPassword","formik","useFormik","initialValues","validationSchema","schemaSignIn","onSubmit","values","actions","login","resetForm","handleChange","handleSubmit","errors","touched","className","css","Avatar","LockOpenOutlined","Typography","component","variant","action","FormGroup","sx","gap","width","TextField","fullWidth","label","name","type","value","onChange","error","Boolean","helperText","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","show","edge","VisibilityOff","Visibility","FormControlLabel","control","Checkbox","checked","Button","Grid","item","Link","href","Login","Helmet"],"sourceRoot":""}