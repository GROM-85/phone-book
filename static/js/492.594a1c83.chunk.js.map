{"version":3,"file":"static/js/492.594a1c83.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/SignUpForm/SignUpForm.module.scss?b627","utils/SchemaSignUp.jsx","components/SignUpForm/SignUpForm.jsx","pages/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paper\":\"SignUpForm_paper__+qitV\",\"avatar\":\"SignUpForm_avatar__oCUJO\",\"form\":\"SignUpForm_form__CGOfo\",\"link\":\"SignUpForm_link__XN3BH\"};","import * as yup from 'yup';\n\nconst schemaSignUp = yup.object().shape({\n  name: yup.string().required('Username is required'),\n  email: yup.string().required('Email is required').email('Incorrect format'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(8, 'â€‹Password must be at least 8 characters'),\n  passwordConfirm: yup\n    .string()\n    .required()\n    .oneOf([yup.ref('password')], 'Password must match'),\n    termsCheck: yup\n    .boolean()\n    .oneOf([true], \"Required terms of use\")\n    .required(\"Required terms of use\"),\n});\n\nexport default schemaSignUp;\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/AuthSlice/operations';\nimport css from './SignUpForm.module.scss';\nimport { Formik, Field, Form} from 'formik';\nimport schemaSignUp from 'utils/SchemaSignUp';\n\n// MUI\nimport {\n  Avatar,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  Grid,\n  IconButton,\n  InputAdornment,\n  Link,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport LockOpenOutlinedIcon from '@mui/icons-material/LockOpenOutlined';\nimport { useState } from 'react';\n\nconst initState = {\n  name:'',\n  email:'',\n  password:'',\n  passwordConfirm:'',\n  termsCheck:false,\n};\n\n// const formReducer = (state = initState, { target: { name, value } }) => ({\n//   ...state,\n//   [name]: value,\n// });\n\nexport const SignUpForm = () => {\n  const dispatch = useDispatch();\n  // const [agree, setAgree] = useState(false);\n  // const formik = useFormik();\n  // const [inputValues, setInputValues] = useReducer(formReducer, initState);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n\n  const handleSubmit = (values, actions) => {\n    console.log('values', values);\n    // console.log('inputsValues', inputValues);\n    const { resetForm } = actions;\n    dispatch(register({...values }));\n    resetForm({\n      values:initState,\n    });\n  };\n\n  // const handleAgreement = e => {\n  //   const { checked } = e.target;\n  //   setAgree(checked);\n  // };\n\n \n  // const { name, email, password, confirmPassword } = inputValues;\n  // const canSubmit = name && email && password.length > 5 && agree;\n\n  return (\n    <div className={css.paper}>\n      <Avatar className={css.avatar}>\n        <LockOpenOutlinedIcon />\n      </Avatar>\n      <Typography component=\"h1\" variant=\"h5\">\n        Sign Up\n      </Typography>\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={initState}\n        validationSchema={schemaSignUp}\n      >\n        {({ errors, touched, isValid, dirty ,values ,handleChange}) => (\n          <Form className={css.form}> \n            <FormGroup sx={{ gap: 2, width: '100%' }}>\n              <Field\n                error={Boolean(errors.name) && Boolean(touched.name)}\n                helperText={Boolean(touched.name) && errors.name}\n                as={TextField}\n                fullWidth\n                label=\"Username\"\n                variant=\"outlined\"\n                name=\"name\"\n                type=\"text\"\n                // value={name}\n                // onInput={setInputValues}\n                // placeholder=\"Enter your Name\"\n              />\n\n              <Field\n                error={Boolean(errors.email) && Boolean(touched.email)}\n                helperText={Boolean(touched.email) && errors.email}\n                as={TextField}\n                label=\"Email\"\n                variant=\"outlined\"\n                name=\"email\"\n                type=\"email\"\n                // value={email}\n                // onInput={setInputValues}\n                // placeholder=\"Enter your email\"\n              />\n              <Field\n               \n                error={Boolean(errors.password)&& Boolean(touched.password)}\n                helperText={Boolean(touched.password) && errors.password}\n                as={TextField}\n                label=\"Password\"\n                variant=\"outlined\"\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                // value={password}\n                // onInput={setInputValues}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                        edge=\"end\"\n                      >\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <Field\n                \n                error={Boolean(errors.confirmPassword) && Boolean(touched.passwordConfirm)}\n                helperText={\n                  errors.confirmPassword ? errors.confirmPassword : ''\n                }\n                as={TextField}\n                label=\"Confirm Password\"\n                variant=\"outlined\"\n                name=\"passwordConfirm\"\n                type={showPassword ? 'text' : 'password'}\n                // value={confirmPassword}\n                // onInput={setInputValues}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                        edge=\"end\"\n                      >\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              {/* <OutlinedInput\n            label=\"Password\"\n            id=\"outlined-adornment-password\"\n            type={showPassword ? 'text' : 'password'}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          /> */}\n\n              <FormControlLabel\n                control={\n                  <Field\n                    as={Checkbox}\n                    checked={values.termsCheck}\n                    onChange={handleChange}\n                    name=\"termsCheck\"\n                  />\n                }\n                label=\"I agree with Terms & Conditions\"\n                name=\"termsCheck\"\n              />\n              <FormHelperText error={Boolean(errors.termsCheck) && Boolean(touched.termsCheck)}>\n                {Boolean(touched.termsCheck) && errors.termsCheck}\n              </FormHelperText>\n              <Button\n                disabled={!isValid || !dirty}\n                type=\"submit\"\n                variant=\"contained\"\n                // startIcon={isLoading && <CircularProgress size={16} />}\n              >\n                Sign Up\n              </Button>\n            </FormGroup>\n          </Form>\n        )}\n      </Formik>\n      <Grid className={css.link}>\n        <Grid item>\n          <Link href=\"login\" variant=\"body2\">\n            Already have an account? Sign in\n          </Link>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { SignUpForm } from 'components/SignUpForm/SignUpForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Sign Up</title>\n      </Helmet>\n      <SignUpForm />\n    </div>\n  );\n}"],"names":["yup","shape","name","required","email","password","min","passwordConfirm","oneOf","termsCheck","initState","SignUpForm","dispatch","useDispatch","useState","showPassword","setShowPassword","handleClickShowPassword","show","className","css","Avatar","LockOpenOutlined","Typography","component","variant","onSubmit","values","actions","console","log","resetForm","register","initialValues","validationSchema","schemaSignUp","errors","touched","isValid","dirty","handleChange","FormGroup","sx","gap","width","error","Boolean","helperText","as","TextField","fullWidth","label","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","VisibilityOff","Visibility","confirmPassword","FormControlLabel","control","Checkbox","checked","onChange","FormHelperText","Button","disabled","Grid","item","Link","href","Register","Helmet"],"sourceRoot":""}